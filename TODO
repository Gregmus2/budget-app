Basic Features
- TODOs
- Fix firebase login

Data sync
- Create external db (firestore, postgres, anything)
- First install - download all the data and write sync timestamp
- Write changes locally (generate ids locally) as sql queries with timestamp
- On app init or by trigger:
    - send all the changes to the server and clear local list of changes
    - download all the changes from server since last sync timestamp and execute
    - update sync timestamp

Design
- download and add font with license https://github.com/material-foundation/flutter-packages/blob/main/packages/google_fonts/README.md#bundling-fonts-when-releasing
/*LicenseRegistry.addLicense(() async* {
    final license = await rootBundle.loadString('google_fonts/OFL.txt');
    yield LicenseEntryWithLineBreaks(['google_fonts'], license);
});*/

Polishing
- do refactoring to extract widgets and functions as much as possible (globally) (possible use gemini)
  - make all properties for all classes private (which are not used outside) and add getters/setters if necessary
- performance issues (https://docs.flutter.dev/perf/best-practices, devtools in profile mode, find other ways to optimize)
- https://pub.dev/packages/dynamic_color
- make transfer targets in numpad recent used, not last item
- add proper error rendering
- Dart analysis

Production
- Add your own signing config for the release build. (android/app/build.gradle:38)
- Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html). (android/app/build.gradle:26)

Features
- Suggestions section
  - Archive old unused accounts and categories